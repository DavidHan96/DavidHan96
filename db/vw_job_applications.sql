CREATE OR REPLACE VIEW JOBDASH.ANALYTICS.VW_JOB_APPLICATIONS AS
WITH base AS (
  -- Row-level fact with dimensional lookups
  SELECT
    fa.APP_ID,
    fa.APPLICATION_KEY,
    fa.APPLICATION_STATUS,
    fa.INTERVIEW_STATUS,
    fa.REFERRAL,
    fa.COMPENSATION,
    fa.CREATED_AT,
    d_company.COMPANY_NAME,
    d_company.INDUSTRY,
    d_role.ROLE_TITLE,
    d_location.CITY,
    d_location.STATE,
    d_source.SOURCE_NAME,
    d_work.WORK_ARRANGEMENT,
    d_date.FULL_DATE AS APPLIED_DATE,
    DATE_TRUNC('WEEK', d_date.FULL_DATE) AS WEEK_START,
    -- Funnel stage flag (row-level)
    CASE 
      WHEN fa.APPLICATION_STATUS = 'Offer' THEN 'Offer'
      WHEN fa.INTERVIEW_STATUS = 'Interviewed' THEN 'Interviewed'
      ELSE 'Applied'
    END AS FUNNEL_STAGE
  FROM JOBDASH.ANALYTICS.FACT_JOB_APPLICATION fa
  LEFT JOIN JOBDASH.ANALYTICS.DIM_COMPANY          d_company  ON fa.COMPANY_KEY = d_company.COMPANY_KEY
  LEFT JOIN JOBDASH.ANALYTICS.DIM_ROLE             d_role     ON fa.ROLE_KEY    = d_role.ROLE_KEY
  LEFT JOIN JOBDASH.ANALYTICS.DIM_LOCATION         d_location ON fa.LOCATION_KEY= d_location.LOCATION_KEY
  LEFT JOIN JOBDASH.ANALYTICS.DIM_SOURCE           d_source   ON fa.SOURCE_KEY  = d_source.SOURCE_KEY
  LEFT JOIN JOBDASH.ANALYTICS.DIM_WORK_ARRANGEMENT d_work     ON fa.WORK_KEY    = d_work.WORK_KEY
  LEFT JOIN JOBDASH.ANALYTICS.DIM_DATE             d_date     ON fa.APPLIED_DATE_KEY = d_date.DATE_KEY
  WHERE COALESCE(fa.IS_DELETED,'no') IN ('no','N')
),

weekly AS (
  -- Weekly funnel counts
  SELECT
    WEEK_START,
    COUNT(APP_ID)                                                   AS WEEKLY_APPLICATIONS,
    COUNT(CASE WHEN INTERVIEW_STATUS   = 'Interviewed' THEN 1 END) AS WEEKLY_INTERVIEWS,
    COUNT(CASE WHEN APPLICATION_STATUS = 'Offer'       THEN 1 END) AS WEEKLY_OFFERS
  FROM base
  GROUP BY 1
),

agg AS (
  -- Weekly cumulative totals
  SELECT
    WEEK_START,
    WEEKLY_APPLICATIONS,
    WEEKLY_INTERVIEWS,
    WEEKLY_OFFERS,
    SUM(WEEKLY_APPLICATIONS) OVER (ORDER BY WEEK_START) AS CUMULATIVE_APPLICATIONS,
    SUM(WEEKLY_INTERVIEWS)  OVER (ORDER BY WEEK_START) AS CUMULATIVE_INTERVIEWS,
    SUM(WEEKLY_OFFERS)      OVER (ORDER BY WEEK_START) AS CUMULATIVE_OFFERS
  FROM weekly
),

company_stats AS (
  -- Per-company KPIs (used for Smart Rankings)
  SELECT
    COMPANY_NAME,
    COUNT(*)                                                     AS COMPANY_APPLICATIONS,
    AVG(COMPENSATION)                                            AS COMPANY_AVG_COMPENSATION,
    COUNT(CASE WHEN APPLICATION_STATUS = 'Reject' THEN 1 END)    AS COMPANY_REJECTIONS
  FROM base
  GROUP BY COMPANY_NAME
),

company_ranks AS (
  -- Ranking metrics per company
  SELECT
    COMPANY_NAME,
    DENSE_RANK() OVER (ORDER BY COMPANY_APPLICATIONS     DESC) AS RANK_BY_APPLICATIONS,
    DENSE_RANK() OVER (ORDER BY COMPANY_AVG_COMPENSATION DESC) AS RANK_BY_AVG_COMP,
    DENSE_RANK() OVER (ORDER BY COMPANY_REJECTIONS       DESC) AS RANK_BY_REJECTIONS
  FROM company_stats
),

latest_per_company AS (
  -- Latest application per company (for Smart Ranking)
  SELECT
    b.COMPANY_NAME,
    ROW_NUMBER() OVER (PARTITION BY b.COMPANY_NAME ORDER BY b.APPLIED_DATE DESC) AS RN
  FROM base b
)

-- Final projection (row-level + weekly agg + company stats + funnel counts)
SELECT
    b.*,
    a.WEEKLY_APPLICATIONS,
    a.WEEKLY_INTERVIEWS,
    a.WEEKLY_OFFERS,
    a.CUMULATIVE_APPLICATIONS,
    a.CUMULATIVE_INTERVIEWS,
    a.CUMULATIVE_OFFERS,
    cs.COMPANY_APPLICATIONS::NUMBER(38,0)      AS COMPANY_APPLICATIONS,
    cs.COMPANY_AVG_COMPENSATION::NUMBER(18,2)  AS COMPANY_AVG_COMPENSATION,
    cs.COMPANY_REJECTIONS::NUMBER(38,0)        AS COMPANY_REJECTIONS,
    cr.RANK_BY_APPLICATIONS,
    cr.RANK_BY_AVG_COMP,
    cr.RANK_BY_REJECTIONS,
    lp.RN,
    -- Funnel total counts as window values (for scorecards / funnel chart)
    COUNT(DISTINCT b.APP_ID) 
        OVER () AS TOTAL_APPLICATIONS,
    COUNT(DISTINCT CASE WHEN b.INTERVIEW_STATUS = 'Interviewed' THEN b.APP_ID END) 
        OVER () AS TOTAL_INTERVIEWS,
    COUNT(DISTINCT CASE WHEN b.APPLICATION_STATUS = 'Offer' THEN b.APP_ID END) 
        OVER () AS TOTAL_OFFERS
FROM base b
LEFT JOIN agg            a  ON b.WEEK_START   = a.WEEK_START
LEFT JOIN company_stats  cs ON b.COMPANY_NAME = cs.COMPANY_NAME
LEFT JOIN company_ranks  cr ON b.COMPANY_NAME = cr.COMPANY_NAME
LEFT JOIN latest_per_company lp 
       ON b.COMPANY_NAME = lp.COMPANY_NAME 
      AND lp.RN = 1;
